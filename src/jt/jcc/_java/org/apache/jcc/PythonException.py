# Copyright 2015-2018 Adam Karpierz
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0

from __future__ import absolute_import

from ......           import jni
from ......jvm.jframe import JFrame
from ......jvm.java   import registerNatives


# Class: org.apache.jcc.PythonException

# Method: native void pythonDecRef();

@jni.method("()V")
def pythonDecRef(env, this):

    jenv = env[0]

    jcls = jenv.GetObjectClass(this)
    jfid = jenv.GetFieldID(jcls, b"py_error_state", b"J")
    state_id = jenv.GetLongField(this, jfid)
    state = (PyObject*) state_id
    if (state == NULL):
        return

    with PythonGIL(jenv):
        jenv.SetLongField(this, jfid, jni.jlong(0))

# Method: native java.lang.String getErrorName();

@jni.method("()Ljava/lang/String;")
def getErrorName(env, this):

    jenv = env[0]

    jcls = jenv.GetObjectClass(this)
    jfid = jenv.GetFieldID(jcls, b"py_error_state", b"J")
    state_id = jenv.GetLongField(this, jfid)
    state = (PyObject*) state_id
    if (state == NULL):
        return NULL

    with PythonGIL(jenv):

        errorName = state[0].__name__
        if (errorName == NULL):
            return NULL

        jstr = env->fromPyString(errorName)  # jni.jstring
        return jstr

# Method: native java.lang.String getErrorMessage();

@jni.method("()Ljava/lang/String;")
def getErrorMessage(env, this):

    jenv = env[0]

    jcls = jenv.GetObjectClass(this)
    jfid = jenv.GetFieldID(jcls, b"py_error_state", b"J")
    state_id = jenv.GetLongField(this, jfid)
    state = (PyObject*) state_id
    if (state == NULL):
        return NULL

    with PythonGIL(jenv):

        value = state[1]
        if value is None:
            return NULL

        message = builin.str(value)
        if (message == NULL):
            return NULL

        jstr = env->fromPyString(message)  # jni.jstring
        return jstr

# Method: native java.lang.String getErrorTraceback();

@jni.method("()Ljava/lang/String;")
def getErrorTraceback(env, this):

    jenv = env[0]

    jcls = jenv.GetObjectClass(this)
    jfid = jenv.GetFieldID(jcls, b"py_error_state", b"J")
    state_id = jenv.GetLongField(this, jfid)
    state = (PyObject*) state_id
    if (state == NULL):
        return NULL

    with PythonGIL(jenv):

        _stderr = sys.stderr
        #PyObject *_stderr = PySys_GetObject("stderr");
        if (!_stderr)
            return NULL
        try:
            try:
                import cStringIO
            except ImportError:
                return NULL

            try:
                stringIO = cStringIO.StringIO()
            except:
                #if (!stringIO)
                return NULL

            sys.stderr = stringIO

            type, value, tb = state

            Py_INCREF(type);
            if value is None:
                value = NULL;
            else:
                Py_INCREF(value);
            if tb is None:
                tb = NULL;
            else:
                Py_INCREF(tb);

            PyErr_Restore(type, value, tb);
            PyErr_Print();

            result = stringIO.getvalue()
            jstr = env->fromPyString(result) if (result != NULL) else NULL  # jni.jstring

        finally:
            sys.stderr = _stderr

        return jstr

# Method: native void saveErrorState();

@jni.method("()V")
def saveErrorState(env, this):

    jenv = env[0]

    with PythonGIL(jenv):

        PyObject *type, *value, *tb;
        PyErr_Fetch(&type, &value, &tb);
        if (type == NULL):
            return
        PyErr_NormalizeException(&type, &value, &tb);

        #state = PyTuple_New(3);
        state = (type, None if (value == NULL) else value, None if (tb == NULL) else tb)
        state_id = id(state)

        jcls = jenv.GetObjectClass(this)
        jfid = jenv.GetFieldID(jcls, b"py_error_state", b"J")

        jenv.SetLongField(this, jfid, jni.jlong(state_id))


# JNIEnv* jenv
@annotate(jenv=jni.JNIEnv)
def _PythonException_registerNatives(jenv):

    registerNatives(jenv, "org.apache.jcc.PythonException", __jnimethods__)


__jnimethods__ = (
    pythonDecRef,
    getErrorName,
    getErrorMessage,
    getErrorTraceback,
    saveErrorState,
)

__javacode__ = bytearray(  # Auto-generated; DO NOT EDIT!
    b"\xca\xfe\xba\xbe\x00\x00\x00\x34\x00\x3b\x0a\x00\x10\x00\x26\x09\x00\x0f\x00\x27"
    b"\x09\x00\x0f\x00\x28\x0a\x00\x0f\x00\x29\x0a\x00\x0f\x00\x2a\x0a\x00\x0f\x00\x2b"
    b"\x0a\x00\x10\x00\x2c\x0a\x00\x0f\x00\x2d\x07\x00\x2e\x0a\x00\x09\x00\x2f\x0a\x00"
    b"\x09\x00\x30\x08\x00\x31\x0a\x00\x09\x00\x32\x0a\x00\x0f\x00\x33\x07\x00\x34\x07"
    b"\x00\x35\x01\x00\x09\x77\x69\x74\x68\x54\x72\x61\x63\x65\x01\x00\x01\x5a\x01\x00"
    b"\x0e\x70\x79\x5f\x65\x72\x72\x6f\x72\x5f\x73\x74\x61\x74\x65\x01\x00\x01\x4a\x01"
    b"\x00\x06\x3c\x69\x6e\x69\x74\x3e\x01\x00\x15\x28\x4c\x6a\x61\x76\x61\x2f\x6c\x61"
    b"\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x29\x56\x01\x00\x04\x43\x6f\x64\x65\x01"
    b"\x00\x08\x66\x69\x6e\x61\x6c\x69\x7a\x65\x01\x00\x03\x28\x29\x56\x01\x00\x0a\x45"
    b"\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x07\x00\x36\x01\x00\x0a\x67\x65\x74\x4d\x65"
    b"\x73\x73\x61\x67\x65\x01\x00\x14\x28\x29\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67"
    b"\x2f\x53\x74\x72\x69\x6e\x67\x3b\x01\x00\x15\x28\x5a\x29\x4c\x6a\x61\x76\x61\x2f"
    b"\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x01\x00\x0d\x53\x74\x61\x63\x6b"
    b"\x4d\x61\x70\x54\x61\x62\x6c\x65\x07\x00\x37\x01\x00\x0c\x70\x79\x74\x68\x6f\x6e"
    b"\x44\x65\x63\x52\x65\x66\x01\x00\x0c\x67\x65\x74\x45\x72\x72\x6f\x72\x4e\x61\x6d"
    b"\x65\x01\x00\x0f\x67\x65\x74\x45\x72\x72\x6f\x72\x4d\x65\x73\x73\x61\x67\x65\x01"
    b"\x00\x11\x67\x65\x74\x45\x72\x72\x6f\x72\x54\x72\x61\x63\x65\x62\x61\x63\x6b\x01"
    b"\x00\x0e\x73\x61\x76\x65\x45\x72\x72\x6f\x72\x53\x74\x61\x74\x65\x0c\x00\x15\x00"
    b"\x16\x0c\x00\x11\x00\x12\x0c\x00\x13\x00\x14\x0c\x00\x25\x00\x19\x0c\x00\x21\x00"
    b"\x19\x0c\x00\x1c\x00\x1e\x0c\x00\x1c\x00\x1d\x0c\x00\x23\x00\x1d\x01\x00\x17\x6a"
    b"\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x42\x75\x69\x6c\x64"
    b"\x65\x72\x0c\x00\x15\x00\x19\x0c\x00\x38\x00\x39\x01\x00\x01\x0a\x0c\x00\x3a\x00"
    b"\x1d\x0c\x00\x24\x00\x1d\x01\x00\x1e\x6f\x72\x67\x2f\x61\x70\x61\x63\x68\x65\x2f"
    b"\x6a\x63\x63\x2f\x50\x79\x74\x68\x6f\x6e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x01"
    b"\x00\x1a\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x52\x75\x6e\x74\x69\x6d\x65\x45"
    b"\x78\x63\x65\x70\x74\x69\x6f\x6e\x01\x00\x13\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67"
    b"\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x01\x00\x10\x6a\x61\x76\x61\x2f\x6c\x61"
    b"\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x01\x00\x06\x61\x70\x70\x65\x6e\x64\x01\x00"
    b"\x2d\x28\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b"
    b"\x29\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x42\x75"
    b"\x69\x6c\x64\x65\x72\x3b\x01\x00\x08\x74\x6f\x53\x74\x72\x69\x6e\x67\x00\x21\x00"
    b"\x0f\x00\x10\x00\x00\x00\x02\x00\x01\x00\x11\x00\x12\x00\x00\x00\x04\x00\x13\x00"
    b"\x14\x00\x00\x00\x09\x00\x01\x00\x15\x00\x16\x00\x01\x00\x17\x00\x00\x00\x20\x00"
    b"\x03\x00\x02\x00\x00\x00\x14\x2a\x2b\xb7\x00\x01\x2a\x04\xb5\x00\x02\x2a\x09\xb5"
    b"\x00\x03\x2a\xb6\x00\x04\xb1\x00\x00\x00\x00\x00\x01\x00\x18\x00\x19\x00\x02\x00"
    b"\x17\x00\x00\x00\x11\x00\x01\x00\x01\x00\x00\x00\x05\x2a\xb6\x00\x05\xb1\x00\x00"
    b"\x00\x00\x00\x1a\x00\x00\x00\x04\x00\x01\x00\x1b\x00\x01\x00\x1c\x00\x1d\x00\x01"
    b"\x00\x17\x00\x00\x00\x15\x00\x02\x00\x01\x00\x00\x00\x09\x2a\x2a\xb4\x00\x02\xb6"
    b"\x00\x06\xb0\x00\x00\x00\x00\x00\x01\x00\x1c\x00\x1e\x00\x01\x00\x17\x00\x00\x00"
    b"\x5e\x00\x04\x00\x03\x00\x00\x00\x43\x2a\xb4\x00\x03\x09\x94\x9a\x00\x08\x2a\xb7"
    b"\x00\x07\xb0\x2a\xb6\x00\x08\x4d\x1b\x99\x00\x2d\xbb\x00\x09\x59\xb7\x00\x0a\x2c"
    b"\xb6\x00\x0b\x12\x0c\xb6\x00\x0b\xb6\x00\x0d\x4d\xbb\x00\x09\x59\xb7\x00\x0a\x2c"
    b"\xb6\x00\x0b\x2a\xb6\x00\x0e\xb6\x00\x0b\xb6\x00\x0d\x4d\x2c\xb0\x00\x00\x00\x01"
    b"\x00\x1f\x00\x00\x00\x09\x00\x02\x0e\xfc\x00\x32\x07\x00\x20\x01\x01\x00\x21\x00"
    b"\x19\x00\x00\x01\x01\x00\x22\x00\x1d\x00\x00\x01\x01\x00\x23\x00\x1d\x00\x00\x01"
    b"\x01\x00\x24\x00\x1d\x00\x00\x01\x04\x00\x25\x00\x19\x00\x00\x00\x00"
)
