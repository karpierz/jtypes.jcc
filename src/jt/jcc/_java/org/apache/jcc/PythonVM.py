# Copyright 2015-2018 Adam Karpierz
# Licensed under the Apache License, Version 2.0
# http://www.apache.org/licenses/LICENSE-2.0

from ......            import jni
from ......jvm.jframe  import JFrame
from ......jvm.jstring import JString
from ......jvm.java    import throwJavaException

PythonException = "org.apache.jcc.PythonException"


# Class: org.apache.jcc.PythonVM

# Method: native Object instantiate(String moduleName, String className) throws PythonException;

@jni.method("(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;")
def instantiate(env, this,
                moduleName, className):

    jenv = env[0]

    with PythonGIL(jenv):

        modStr = JString(jenv, moduleName, borrowed=True).str if moduleName else None
        try:
            module = __import__(modStr)
        except ImportError as exc:
            throwJavaException(jenv, PythonException, "import failed")
            return NULL

        clsStr = JString(jenv, className, borrowed=True).str if className else None
        try:
            cls = getattr(module, clsStr)
        except AttributeError as exc:
            throwJavaException(jenv, PythonException, "class not found")
            return NULL

        try:
            obj = cls()
        except:
            #if (!obj):
            throwJavaException(jenv, PythonException, "instantiation failed")
            return NULL

        try:
            cObj = obj._jobject
        except AttributeError as exc:
            throwJavaException(jenv, PythonException, "instance does not proxy a java object")
            return NULL

        jobj = PyCapsule_GetPointer(cObj, "jobject")  # jni.jobject
        jobj = jenv.NewLocalRef(jobj)

        return jobj

# Method: native int acquireThreadState();

@jni.method("()I")
def acquireThreadState(env, this):

    with PythonGIL():
        tstate = PyGILState_GetThisThreadState()

        if tstate and tstate.gilstate_counter >= 1:
            tstate.gilstate_counter += 1
            return tstate.gilstate_counter
        else:
            return -1

# Method: native int releaseThreadState();

@jni.method("()I")
def releaseThreadState(env, this):

    with PythonGIL():
        tstate = PyGILState_GetThisThreadState()

        if tstate and tstate.gilstate_counter >= 1:
            tstate.gilstate_counter -= 1
            return tstate.gilstate_counter
        else:
            return -1


__jnimethods__ = (
    instantiate,
    acquireThreadState,
    releaseThreadState,
)

__javacode__ = bytearray(  # Auto-generated; DO NOT EDIT!
    b"\xca\xfe\xba\xbe\x00\x00\x00\x34\x00\x2c\x0a\x00\x03\x00\x1f\x09\x00\x03\x00\x20"
    b"\x07\x00\x21\x0a\x00\x03\x00\x22\x0a\x00\x03\x00\x23\x0a\x00\x09\x00\x22\x08\x00"
    b"\x24\x0a\x00\x25\x00\x26\x07\x00\x27\x01\x00\x02\x76\x6d\x01\x00\x19\x4c\x6f\x72"
    b"\x67\x2f\x61\x70\x61\x63\x68\x65\x2f\x6a\x63\x63\x2f\x50\x79\x74\x68\x6f\x6e\x56"
    b"\x4d\x3b\x01\x00\x05\x73\x74\x61\x72\x74\x01\x00\x2d\x28\x4c\x6a\x61\x76\x61\x2f"
    b"\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x29\x4c\x6f\x72\x67\x2f\x61\x70"
    b"\x61\x63\x68\x65\x2f\x6a\x63\x63\x2f\x50\x79\x74\x68\x6f\x6e\x56\x4d\x3b\x01\x00"
    b"\x04\x43\x6f\x64\x65\x01\x00\x40\x28\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f"
    b"\x53\x74\x72\x69\x6e\x67\x3b\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53"
    b"\x74\x72\x69\x6e\x67\x3b\x29\x4c\x6f\x72\x67\x2f\x61\x70\x61\x63\x68\x65\x2f\x6a"
    b"\x63\x63\x2f\x50\x79\x74\x68\x6f\x6e\x56\x4d\x3b\x01\x00\x0d\x53\x74\x61\x63\x6b"
    b"\x4d\x61\x70\x54\x61\x62\x6c\x65\x01\x00\x03\x67\x65\x74\x01\x00\x1b\x28\x29\x4c"
    b"\x6f\x72\x67\x2f\x61\x70\x61\x63\x68\x65\x2f\x6a\x63\x63\x2f\x50\x79\x74\x68\x6f"
    b"\x6e\x56\x4d\x3b\x01\x00\x06\x3c\x69\x6e\x69\x74\x3e\x01\x00\x03\x28\x29\x56\x01"
    b"\x00\x04\x69\x6e\x69\x74\x01\x00\x28\x28\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67"
    b"\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f"
    b"\x53\x74\x72\x69\x6e\x67\x3b\x29\x56\x01\x00\x0b\x69\x6e\x73\x74\x61\x6e\x74\x69"
    b"\x61\x74\x65\x01\x00\x38\x28\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74"
    b"\x72\x69\x6e\x67\x3b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69"
    b"\x6e\x67\x3b\x29\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x4f\x62\x6a\x65\x63"
    b"\x74\x3b\x01\x00\x0a\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x07\x00\x28\x01\x00"
    b"\x12\x61\x63\x71\x75\x69\x72\x65\x54\x68\x72\x65\x61\x64\x53\x74\x61\x74\x65\x01"
    b"\x00\x03\x28\x29\x49\x01\x00\x12\x72\x65\x6c\x65\x61\x73\x65\x54\x68\x72\x65\x61"
    b"\x64\x53\x74\x61\x74\x65\x01\x00\x08\x3c\x63\x6c\x69\x6e\x69\x74\x3e\x0c\x00\x0c"
    b"\x00\x0f\x0c\x00\x0a\x00\x0b\x01\x00\x17\x6f\x72\x67\x2f\x61\x70\x61\x63\x68\x65"
    b"\x2f\x6a\x63\x63\x2f\x50\x79\x74\x68\x6f\x6e\x56\x4d\x0c\x00\x13\x00\x14\x0c\x00"
    b"\x15\x00\x16\x01\x00\x03\x6a\x63\x63\x07\x00\x29\x0c\x00\x2a\x00\x2b\x01\x00\x10"
    b"\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x4f\x62\x6a\x65\x63\x74\x01\x00\x1e\x6f"
    b"\x72\x67\x2f\x61\x70\x61\x63\x68\x65\x2f\x6a\x63\x63\x2f\x50\x79\x74\x68\x6f\x6e"
    b"\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x01\x00\x10\x6a\x61\x76\x61\x2f\x6c\x61\x6e"
    b"\x67\x2f\x53\x79\x73\x74\x65\x6d\x01\x00\x0b\x6c\x6f\x61\x64\x4c\x69\x62\x72\x61"
    b"\x72\x79\x01\x00\x15\x28\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72"
    b"\x69\x6e\x67\x3b\x29\x56\x00\x21\x00\x03\x00\x09\x00\x00\x00\x01\x00\x0c\x00\x0a"
    b"\x00\x0b\x00\x00\x00\x09\x00\x09\x00\x0c\x00\x0d\x00\x01\x00\x0e\x00\x00\x00\x12"
    b"\x00\x02\x00\x01\x00\x00\x00\x06\x2a\x01\xb8\x00\x01\xb0\x00\x00\x00\x00\x00\x09"
    b"\x00\x0c\x00\x0f\x00\x01\x00\x0e\x00\x00\x00\x31\x00\x03\x00\x02\x00\x00\x00\x1c"
    b"\xb2\x00\x02\xc7\x00\x15\xbb\x00\x03\x59\xb7\x00\x04\xb3\x00\x02\xb2\x00\x02\x2a"
    b"\x2b\xb6\x00\x05\xb2\x00\x02\xb0\x00\x00\x00\x01\x00\x10\x00\x00\x00\x03\x00\x01"
    b"\x18\x00\x09\x00\x11\x00\x12\x00\x01\x00\x0e\x00\x00\x00\x10\x00\x01\x00\x00\x00"
    b"\x00\x00\x04\xb2\x00\x02\xb0\x00\x00\x00\x00\x00\x04\x00\x13\x00\x14\x00\x01\x00"
    b"\x0e\x00\x00\x00\x11\x00\x01\x00\x01\x00\x00\x00\x05\x2a\xb7\x00\x06\xb1\x00\x00"
    b"\x00\x00\x01\x04\x00\x15\x00\x16\x00\x00\x01\x01\x00\x17\x00\x18\x00\x01\x00\x19"
    b"\x00\x00\x00\x04\x00\x01\x00\x1a\x01\x01\x00\x1b\x00\x1c\x00\x00\x01\x01\x00\x1d"
    b"\x00\x1c\x00\x00\x00\x08\x00\x1e\x00\x14\x00\x01\x00\x0e\x00\x00\x00\x12\x00\x01"
    b"\x00\x00\x00\x00\x00\x06\x12\x07\xb8\x00\x08\xb1\x00\x00\x00\x00\x00\x00"
)
